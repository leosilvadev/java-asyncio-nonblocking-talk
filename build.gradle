group 'com.github.leosilvadev'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'io.netty', name: 'netty-all', version: '4.1.24.Final'
  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.14'

  compile group: 'com.google.guava', name: 'guava', version: '25.1-jre'
  compile group: 'com.google.inject', name: 'guice', version: '4.2.0'

  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.5'

  testCompile 'io.rest-assured:rest-assured:3.1.0'
  testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
  testCompile group: 'cglib', name: 'cglib-nodep', version: '3.2.6'
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

jacoco {
  toolVersion = "0.7.5.201505241946"
}



test {
  group = 'test'
  description = 'Run all unit tests (*UnitSpec)'
  filter {
    includeTestsMatching '*UnitSpec'
  }
  outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
  group = 'test'
  description = 'Run all integration tests (*IntegrationSpec)'
  filter {
    includeTestsMatching '*IntegrationSpec'
  }
  outputs.upToDateWhen { false }
}

task allTest(type: Test) {
  group = 'test'
  description = 'Run all tests (*Spec)'
  filter {
    includeTestsMatching '*Spec'
  }
  outputs.upToDateWhen { false }
}

task jacocoUnitTestReport(type: JacocoReport) {
  group = "reporting"
  description = "Generate Jacoco coverage reports for unit tests."

  sourceSets sourceSets.main
  executionData test

  reports {
    xml.enabled false
    csv.enabled false
    html.destination file("${buildDir}/coverage/unit")
  }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
  group = "reporting"
  description = "Generate Jacoco coverage reports for integration tests."

  sourceSets sourceSets.main
  executionData integrationTest

  reports {
    xml.enabled false
    csv.enabled false
    html.destination file("${buildDir}/coverage/integration")
  }
}

task jacocoAllTestReport(type: JacocoReport) {
  group = "reporting"
  description = "Generate Jacoco coverage reports for all tests."

  sourceSets sourceSets.main
  executionData allTest

  reports {
    xml.enabled false
    csv.enabled false
    html.destination file("${buildDir}/coverage/all")
  }
}

test.finalizedBy jacocoUnitTestReport
integrationTest.finalizedBy jacocoIntegrationTestReport
allTest.finalizedBy jacocoAllTestReport